name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to build release for"
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings

permissions:
  contents: write

jobs:
  # Validate the release before proceeding
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Validate version consistency
        run: |
          # Extract version from git tag
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG_VERSION="${{ github.event.inputs.tag }}"
            TAG_VERSION=${TAG_VERSION#v}
          else
            TAG_VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "Tag version: $TAG_VERSION"

          # Extract version from Cargo.toml
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "Cargo.toml version: $CARGO_VERSION"

          # Compare versions
          if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
            echo "ERROR: Version mismatch!"
            echo "Git tag: v$TAG_VERSION"
            echo "Cargo.toml: $CARGO_VERSION"
            echo ""
            echo "Please ensure the version in Cargo.toml matches the git tag."
            echo "Expected: version = \"$TAG_VERSION\""
            exit 1
          fi

          echo "âœ“ Version consistency validated: $TAG_VERSION"

      - name: Validate build
        run: |
          cargo check --release --locked
          cargo test --all --all-features

  # Build binaries and create release
  release:
    name: Build Release Binaries
    needs: validate
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: abusedetector
            asset_name: abusedetector-linux-x86_64
            cross: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: abusedetector
            asset_name: abusedetector-linux-x86_64-musl
            cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: abusedetector
            asset_name: abusedetector-linux-aarch64
            cross: true

          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: abusedetector
            asset_name: abusedetector-macos-x86_64
            cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: abusedetector
            asset_name: abusedetector-macos-aarch64
            cross: false

          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: abusedetector.exe
            asset_name: abusedetector-windows-x86_64.exe
            cross: false

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Get tag name
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag_name=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Cache cargo registry + build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-release-
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      # Install cross for cross-compilation
      - name: Install cross
        if: matrix.cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      # Linux musl specific setup
      - name: Install musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      # Platform-specific setup for native compilation
      - name: Setup platform dependencies
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          echo "Windows setup - using vendored OpenSSL"

      - name: Build binary
        run: |
          if [ "${{ matrix.cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }} --locked
          else
            cargo build --release --target ${{ matrix.target }} --locked
          fi
        shell: bash

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          if command -v strip >/dev/null 2>&1; then
            strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          fi

      - name: Prepare binary
        id: prepare_binary
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}
          else
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}
          fi

          # Get file size for upload
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "binary_size=$(wc -c < '${{ matrix.asset_name }}' | tr -d ' ')" >> $GITHUB_OUTPUT
          else
            echo "binary_size=$(stat -f%z '${{ matrix.asset_name }}' 2>/dev/null || stat -c%s '${{ matrix.asset_name }}')" >> $GITHUB_OUTPUT
          fi
        shell: bash

      # Create checksums for security
      - name: Generate checksums
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            certutil -hashfile ${{ matrix.asset_name }} SHA256 > ${{ matrix.asset_name }}.sha256
          else
            shasum -a 256 ${{ matrix.asset_name }} > ${{ matrix.asset_name }}.sha256
          fi
        shell: bash

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
        with:
          tag_name: ${{ steps.get_tag.outputs.tag_name }}
          name: Release ${{ steps.get_tag.outputs.tag_name }}
          draft: false
          prerelease: ${{ contains(steps.get_tag.outputs.tag_name, '-') }}
          files: |
            ${{ matrix.asset_name }}
            ${{ matrix.asset_name }}.sha256
          body: |
            ## Changes

            See the [CHANGELOG](https://github.com/${{ github.repository }}/blob/${{ steps.get_tag.outputs.tag_name }}/CHANGELOG.md) for details.

            ## Installation

            Download the appropriate binary for your platform from the assets below.

            ### Linux/macOS
            ```bash
            # Make executable and move to PATH
            chmod +x abusedetector-*
            sudo mv abusedetector-* /usr/local/bin/abusedetector
            ```

            ### Windows
            ```powershell
            # Add to PATH or run directly
            .\abusedetector-windows-x86_64.exe --help
            ```

            ## Checksums

            SHA256 checksums are provided for all binaries. Verify your download:

            ```bash
            # Linux/macOS
            shasum -a 256 -c abusedetector-*.sha256

            # Windows
            certutil -hashfile abusedetector-*.exe SHA256
            ```
