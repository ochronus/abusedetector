name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "17 3 * * *"
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings

jobs:
  # Multi-platform testing matrix
  # Tests stable Rust on all platforms (Linux, macOS, Windows)
  build-test:
    name: build & test (stable / ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: clippy, rustfmt

      # Platform-specific setup
      - name: Setup platform dependencies
        shell: bash
        run: |
          case "${{ runner.os }}" in
            "Windows")
              echo "Windows setup complete - using vendored dependencies"
              ;;
            "macOS")
              echo "macOS setup complete"
              ;;
            "Linux")
              echo "Linux setup complete"
              ;;
          esac

      - name: Cache cargo registry + build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-stable-
            ${{ runner.os }}-cargo-

      - name: Cargo fetch
        run: cargo fetch

      - name: Format check
        run: cargo fmt -- --check

      - name: Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Build
        run: cargo build --all --all-features --verbose

      - name: Tests
        run: cargo test --all --all-features --verbose
        env:
          # Ensure consistent behavior across platforms
          RUST_BACKTRACE: 1

      # Build release binary to ensure optimized builds work on all platforms
      - name: Build release
        run: cargo build --release --all-features

  # Test Minimum Supported Rust Version (MSRV)
  # This ensures we don't accidentally use newer Rust features
  msrv:
    name: MSRV check (1.85.0 / ubuntu)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust (MSRV)
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.85.0

      - name: Cache cargo registry + build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-msrv-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-msrv-
            ${{ runner.os }}-cargo-

      - name: Check MSRV
        run: cargo check --all --all-features

  # Code coverage analysis
  # Only run on Ubuntu with stable Rust for consistent results
  coverage:
    name: coverage (stable / ubuntu)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Cache cargo registry + build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-coverage-
            ${{ runner.os }}-cargo-

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin --locked

      - name: Run coverage
        run: |
          cargo tarpaulin --timeout 120 --out Xml --out Lcov --workspace
        env:
          RUSTFLAGS: "-C instrument-coverage"

      - name: Upload coverage artifact (LCOV)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-lcov
          path: lcov.info

      - name: Upload coverage artifact (XML)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: cobertura.xml
